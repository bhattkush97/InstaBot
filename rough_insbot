# Importing requests for accessing the web urls
import requests

# Importing matplotlib( 2D plotting library), numpy(fundamental package for scientific computing ) for plotting the pie graph
import matplotlib.pyplot as plt
import numpy as np

# Importing urllib( provides a high-level interface for fetching data across the World Wide Web) to retrieve the image url
import urllib

# Importing TextBlob(library for processing textual data) from textblob to analyze the text
from textblob import TextBlob
from textblob.sentiments import NaiveBayesAnalyzer

# Importing Access token and base url
global ACCESS_TOKEN, BASE_URL
ACCESS_TOKEN = '3654331653.47c427d.69e9a69163f543d3a2eb0ca47b32dbe7'
BASE_URL = 'https://api.instagram.com/v1/'

'''# Importing the ACCESS TOKEN from access.py file
   #from access import ACCESS_TOKEN
'''
# Defining the BASE URL
BASE_URL = 'https://api.instagram.com/v1'


# ...............******.............
# Function for getting the owner info (yourself)
def self_info():
    request_url = BASE_URL + '/users/self/?access_token=%s' % (ACCESS_TOKEN)
    print 'GET the request url : %s' % request_url
    my_info = requests.get(request_url).json()

    # Checking if the return meta code is 200
    if my_info['meta']['code'] == 200:

        # If the data of user  exist
        if len(my_info['data']):
            print 'Username : %s' % (my_info['data']['username'])
            print 'Full Name : %s' % (my_info['data']['full_name'])
            print 'No. of followers are : %s ' % (my_info['data']['counts']['followed_by'])
            print 'No. of peoples you are following : %s' % (my_info['data']['counts']['follows'])
            print 'No of posts : %s' % (my_info['data']['counts']['media'])
        else:
            print 'Desired User does not exist'
    else:
        print 'The Meta Code Recieved is ' + my_info['meta']['code']


# ...............******.............
# Function definition to get a user id using Instagram username
def get_user_id(insta_username):
    request_url = BASE_URL + '/users/search?q=%s&access_token=%s' % (insta_username, ACCESS_TOKEN)
    print 'GET request url : %s' % request_url
    user_info = requests.get(request_url).json()
    # Checking if returned meta code is 200 or not
    if user_info['meta']['code'] == 200:
        if len(user_info['data']):
            # Returning the user id
            return user_info['data'][0]['id']
        else:
            return None
    else:
        print 'Received Meta Code is ' + user_info['meta']['code']


# ...............******.............
# Function to get the user information
def user_info(insta_username):
    user_id = get_user_id(insta_username)
    if user_id is None:
        print 'User does not exit'
        exit()
    else:
        request_url = BASE_URL + '/users/%s/?access_token=%s' % (user_id, ACCESS_TOKEN)
        print 'GET request url : %s' % request_url
        user_info = requests.get(request_url).json()
        # Checking if meta code received is 200
        if user_info['meta']['code'] == 200:
            if len(user_info['data']):
                # Printing user info
                print 'Username : %s' % (user_info['data']['username'])
                print 'Full Name :%s' % (user_info['data']['full_name'])
                print 'No of peoples He is following : %s ' % (user_info['data']['counts']['followed_by'])
                print 'No. of peoples following him are: %s' % (user_info['data']['counts']['follows'])
                print 'No of posts : %s' % (user_info['data']['counts']['media'])
            else:
                print 'User have no data!'
        else:
            print 'Received Meta Code is ' + user_info['meta']['code']


# ...............******.............
# Function to get the recent post of the owner
def get_own_post():
    request_url = BASE_URL + '/users/self/media/recent/?access_token=%s' % (ACCESS_TOKEN)
    print 'GET request url : %s' % request_url
    own_media = requests.get(request_url).json()
    if own_media['meta']['code'] == 200:
        if len(own_media['data']):

            # Getting the image name as same as the post id
            image_name = own_media['data'][0]['id'] + '.jpeg'

            # Getting the image url from instagram database
            image_url = own_media['data'][0]['images']['standard_resolution']['url']

            # Using urllib downloading the image from the url and saving it with image_name name
            urllib.urlretrieve(image_url, image_name)
            print 'Your recent post is downloaded'
            return 'Here is your post id ' + own_media['data'][0]['id']
        else:
            return 'Sorry!! looks like you do not have any recent post'
    else:
        print 'The Meta Code recieved is' + own_media['meta']['code']


# ...............******.............
# Function definition to get the recent post of the user
def get_user_post(insta_username):
    user_id = get_user_id(insta_username)
    if user_id is None:
        print 'User does not exit !'
        exit()
    else:
        request_url = BASE_URL + '/users/%s/media/recent/?access_token=%s' % (user_id, ACCESS_TOKEN)
        print 'GET request url : %s' % request_url
        user_media = requests.get(request_url).json()
        if user_media['meta']['code'] == 200:
            if len(user_media['data']):

                # Providing a criteria for search
                print 'You can refine your search more precisely'
                print '1. User Post with Minimum likes\n' \
                      '2. User Post with Maximum likes\n' \
                      '3. User Post with a certain Caption\n' \
                      '4. Just Recent one'
                option = int(raw_input('Enter your choice'))

                # Declaring a variable will be used as id of a post
                i = -1
                if option == 1:
                    like = ''
                    for x in range(0, len(user_media['data'])):
                        # Comparing likes on a post

                        if user_media['data'][x]['likes']['count'] < like:
                            like = user_media['data'][x]['likes']['count']
                            i = x

                elif option == 2:
                    like = -1
                    for x in range(0, len(user_media['data'])):

                        # Comparing likes on a post
                        if user_media['data'][x]['likes']['count'] > like:
                            like = user_media['data'][x]['likes']['count']
                            i = x

                elif option == 3:
                    caption = raw_input('Enter the caption')
                    for x in range(0, len(user_media['data'])):
                        text = user_media['data'][x]['caption']['text']

                        # Checking if the entered caption is present in all the captions
                        if caption.lower() in text.lower():
                            i = x

                    if i is -1:
                        print 'No such caption is present'
                        exit()

                elif option == 4:
                    # Assigning 0 to i i.e id of recent post
                    i = 0

                else:
                    print 'Wrong choice!! Try again'
                if i >= 0:
                    # Getting the image name as same as the post id
                    image_name = user_media['data'][i]['id'] + '.jpeg'

                    # Getting the url of image from the instagram
                    image_url = user_media['data'][i]['images']['standard_resolution']['url']

                    # Downloading the image from image_url and saving it with image_name name.
                    urllib.urlretrieve(image_url, image_name)
                    print 'Congratulation\'s sUser\'s recent post is downloaded'
                    return user_media['data'][i]['id']
            else:
                return 'User does not have any post !'
        else:
            print 'Here is the received Meta Code is' + user_media['meta']['code']


# ...............******.............
# Function to fetch user's recent post id
def get_user_post_id(insta_username):
    user_id = get_user_id(insta_username)
    if user_id is None:
        print 'Desired User does not exit'
        exit()
    else:
        request_url = BASE_URL + '/users/%s/media/recent/?access_token=%s' % (user_id, ACCESS_TOKEN)
        print 'GET request url : %s' % request_url
        user_media = requests.get(request_url).json()
        if user_media['meta']['code'] == 200:
            if len(user_media['data']):

                # Returning the user's recent post id
                return user_media['data'][0]['id']
            else:
                print 'User does not have any recent post!'
                exit()
        else:
            print 'Here is the received Meta Code is ' + user_media['meta']['code']


# ...............******.............
# Function to like a post
def like_a_post(insta_username):
    media_id = get_user_post_id(insta_username)
    request_url = BASE_URL + '/media/%s/likes' % (media_id)
    print 'POST request url : %s' % request_url
    payload = {"access_token": ACCESS_TOKEN}

    # Setting a like on a user's recent post
    post_a_like = requests.post(request_url, payload).json()
    if post_a_like['meta']['code'] == 200:
        print 'Bingo!! Your Post Liked'
    else:
        print 'Like is Unsuccessful Try Again!'


# ...............******.............
# Function to get the comment list from a post
def get_comment_list(insta_username):
    media_id = get_user_post_id(insta_username)
    request_url = BASE_URL + '/media/%s/comments?access_token=%s' % (media_id, ACCESS_TOKEN)
    print 'GET request url : %s' % request_url
    comment = requests.get(request_url).json()
    if comment['meta']['code'] == 200:
        if len(comment['data']):
            print 'Here are the comments Listed below :'
            for x in range(0, len(comment['data'])):
                # Printing the comment posted on a post
                print comment['data'][x]['text']
        else:
            print 'There are no comments on this post'
    else:
        print 'No media available ! Try again'


# ...............******.............
# Function to comment on a post
def comment_on_post(insta_username):
    media_id = get_user_post_id(insta_username)
    print 'Comment length should not exceed by 100,You Can put up #tags in all Capital letters\n'
    comment = raw_input('Put up a comment...')
    request_url = BASE_URL + '/media/%s/comments' % (media_id)
    print 'POST request url : %s' % request_url
    payload = {'access_token': ACCESS_TOKEN, 'text': comment}

    # Posting a comment on post
    post_comment = requests.post(request_url, payload).json()
    if post_comment['meta']['code'] == 200:
        print 'Your Comment has Successfully Added'
    else:
        print 'Unable to post Comment!! try again !'


# ...............******.............
# Function to get the recent media liked by owner
def own_media_liked():
    request_url = BASE_URL + '/users/self/media/recent/?access_token=%s' % (ACCESS_TOKEN)
    print 'GET request url : %s' % request_url
    recent_media = requests.get(request_url).json()
    if recent_media['meta']['code'] == 200:
        if len(recent_media['data']):
            print 'Post id :' + recent_media['data'][0]['id']
        else:
            print 'You have not liked any recent media'
    else:
        print 'Meta Code Error! Try again'


# ...............******.............
# Function to perform Sentiment Analysis on selected post and print a Pie chart or positive vs negative content.

def perform_sentiment_analysis(insta_username):
    unm = get_user_id(insta_username)
    id = get_user_id(unm)
    if id != 0:
        pass
    else:
        exit()

    post_id = get_user_post_id()
    print "Fetching data..."
    req_url = BASE_URL + "media/" + post_id + "/comments/?access_token=" + ACCESS_TOKEN

    comments = requests.get(req_url).json()
    data = ""
    if not comments['data']:
        print "No comments found."
    else:
        for temp in comments['data']:
            temp['text'] += " " + temp['text']
            data = temp['text']

            #
            #   SENTIMENT ANALYSIS. DO NOT MESS WITH THE CODE UNDER THIS.
            #

        blob = TextBlob(data, analyzer=NaiveBayesAnalyzer())
        if blob.sentiment.classification == "neg":
            print "Overall negative content found. More details in the pie chart."
        else:
            print "Overall Positive content found. More details in the pie chart."
        print blob.sentiment.classification
        pos = blob.sentiment.p_pos
        neg = blob.sentiment.p_neg
        labels = 'Positive Comments %age', 'Negative Comments %age'
        sizes = [pos, neg]
        explode = (0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')

        fig1, ax1 = plt.subplots()
        ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
                shadow=False, startangle=90)
        ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

        plt.show()


# ...............******.............
# Function to get the recent media like d by other user
def user_media_liked(insta_username):
    user_id = get_user_id(insta_username)
    if user_id is None:
        print ' No such user'
        exit()
    request_url = BASE_URL + '/users/%s/media/recent/?access_token=%s' % (user_id, ACCESS_TOKEN)
    print 'GET request url : %s' % request_url
    recent_media = requests.get(request_url).json()
    if recent_media['meta']['code'] == 200:
        if len(recent_media['data']):
            print 'Post id he/she liked recently' + recent_media['data'][0]['id']
        else:
            return None
    else:
        print 'Meta Code Error!'


# ...............******.............
# Function to delete negative comments from a post
def del_negative_comment(insta_username):
    media_id = get_user_post_id(insta_username)
    request_url = (BASE_URL + '/media/%s/comments/?access_token=%s') % (media_id, ACCESS_TOKEN)
    print 'GET request url : %s' % (request_url)
    comment_info = requests.get(request_url).json()
    neg = 0
    pos = 0
    query = raw_input('Do you want to plot the data on a pie chart (y/n) ?')
    if query.upper() == 'Y':
        labels = 'Positive', 'Negative'
        sizes = [pos, neg]
        explode = (0, 0)
        fig1, ax1 = plt.subplots()
        ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', startangle=90)
        # Equal aspect ratio ensures that pie is drawn as a circle.

        ax1.axis('equal')
        plt.show()

    else:
        print 'There are no existing comments on the post!'


# ...............xxxxxxxxxxxxxxxxx.............
# Here is the main function
def start_chat():
    while True:
        print '\n_________@@@@Welcome to Instabot@@@@__________'
        print 'Menu:'
        print '1.  Get the details of your own'
        print '2.  Get your friend\'s details'
        print '3.  Download your recent post'
        print '4.  Download your friend\'s post'
        print '5.  Like a post'
        print '6.  Comment on a post'
        print '7.  Find out what you have liked recently'
        print '8.  Find out what your friend have liked recently'
        print '9.  Delete the negative comments from your post(N/A)'
        print '10. List of comment in the post'
        print '11. Sentiment Analysis on selected post and print a Pie chart or positive vs negative content.'
        print '12. Exit'
        option = int(raw_input('Enter your choice : '))

        if option == 1:
            print 'Here is your information :'
            self_info()

        elif option == 2:
            username = raw_input('Enter the name your friend\'s :')
            user_info(username)

        elif option == 3:
            get_own_post()

        elif option == 4:
            username = raw_input('Enter the name your friend\'s  :')
            get_user_post(username)

        elif option == 5:
            query = raw_input('Do you want to like your own post (y/n) ?')
            if query.upper() == 'Y':
                request_url = BASE_URL + '/users/self/?access_token=%s' % (ACCESS_TOKEN)
                username = requests.get(request_url).json()
                like_a_post(username['data']['username'])
            elif query.upper() == 'N':
                print 'Enter the friend\'s name who\'s post you want to like'
                username = raw_input()
                like_a_post(username)
            else:
                print 'Wrong choice !'

        elif option == 6:
            query = raw_input('Do you want to comment on your own post (y/n) ?')
            if query.upper() == 'Y':
                request_url = BASE_URL + '/users/self/?access_token=%s' % (ACCESS_TOKEN)
                username = requests.get(request_url).json()
                comment_on_post(username['data']['username'])
            elif query.upper() == 'N':
                print 'Enter the friend\'s name on who\'s post you wanna comment'
                username = raw_input()
                comment_on_post(username)
            else:
                print 'Wrong choice !'

        elif option == 7:
            own_media_liked()

        elif option == 8:
            username = raw_input('Enter your friends name')
            user_media_liked(username)

        elif option == 9:
            query = raw_input('Do you want to delete comments from your own post (y/n) ?')
            if query.upper() == 'Y':
                request_url = BASE_URL + '/users/self/?access_token=%s' % (ACCESS_TOKEN)
                username = requests.get(request_url).json()
                del_negative_comment(username['data']['username'])
            elif query.upper() == 'N':
                print 'Enter the friend\'s name who\'s post from you wanna delete comments :'
                username = raw_input()
                del_negative_comment(username)
            else:
                print 'Wrong choice !'

        elif option == 10:
            query = raw_input('Do you want to get the comments from your own post (y/n) ?')
            if query.upper() == 'Y':
                request_url = BASE_URL + '/users/self/?access_token=%s' % (ACCESS_TOKEN)
                userdata = requests.get(request_url).json()
                username = userdata['data']['username']
                get_comment_list(username)
            elif query.upper() == 'N':
                print 'Enter the friend\'s name who\'s post from you wanna get the comments :'
                username = raw_input()
                get_comment_list(username)
            else:
                print 'Wrong choice !'

        elif option == 11:

            perform_sentiment_analysis()

        elif option == 12:
            exit()

        else:
            print 'Wrong Choice !'
            exit()


start_chat()
